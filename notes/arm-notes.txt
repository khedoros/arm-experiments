Note: The order of these checks is important (less-ambiguous instructions are ruled out first).
      When an instruction is fetched, AND it with the specified bits, then check for equality with the "matching value".


                            |31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00| Mask for specified bits | Matching value
BX                          | C  o  n  d| 0  0  0  1  0  0  1  0  1  1  1  1  1  1  1  1  1  1  1  1  0  0  0  1|     Rn    |   0x0FFFFFF0              0x012FFF10    24
MRS                         | C  o  n  d| 0  0  0  1  0|Ps| 0  0  1  1  1  1|     Rd    | 0  0  0  0  0  0  0  0  0  0  0  0|   0x0FBF0FFF              0x010F0000    23
MSR(reg to PSR)             | C  o  n  d| 0  0  0  1  0|Pd| 1  0  1  0  0  1| 1  1  1  1| 0  0  0  0  0  0  0  0|     Rm    |   0x0FBFFFF0              0x0129F000    23
MSR(reg to PSR flags)       | C  o  n  d| 0  0  0  1  0|Pd| 1  0  1  0  0  0  1  1  1  1| 0  0  0  0  0  0  0  0|     Rm    |   0x0FBFFFF0              0x0128F000    23
MSR(immediate to PSR flags) | C  o  n  d| 0  0  1  1  0|Pd| 1  0  1  0  0  0  1  1  1  1|Rotation   |     8-bit immediate   |   0x0FBFF000              0x0328F000    15
SWP                         | C  o  n  d| 0  0  0  1  0| B| 0  0|     Rn    |     Rd    | 0  0  0  0  1  0  0  1|     Rm    |   0x0FB00FF0              0x01000090    15
LDRH, STRH, LDRSB, LDRSH    | C  o  n  d| 0  0  0| P| U| 0| W| L|     Rn    |     Rd    | 0  0  0  0  1| S| H| 1|     Rm    |   0x0E400F90              0x00000090    10
LDRH, STRH, LDRSB, LDRSH    | C  o  n  d| 0  0  0| P| U| 1| W| L|     Rn    |     Rd    | OffsetHi  | 1| S| H| 1| OffsetLo  |   0x0E400090              0x00400090    06
Multiply                    | C  o  n  d| 0  0  0  0  0  0| A| S|     Rd    |     Rn    |     Rs    | 1  0  0  1|     Rm    |   0x0FC000F0              0x00000090    10
Multiply Long               | C  o  n  d| 0  0  0  0  1| U| A| S|   RdHi    |   RdLo    |     Rs    | 1  0  0  1|     Rm    |   0x0F8000F0              0x00800090    09
ALU Ops (immed-reg shift)   | C  o  n  d| 0  0  0| C  o  d  e| S|     Rn    |     Rd    | shift amount | type| 0|     Rm    |   0x0E000010              0x00000000    04
ALU Ops (reg-reg shift)     | C  o  n  d| 0  0  0| C  o  d  e| S|     Rn    |     Rd    |     Rs    | 0| type| 1|     Rm    |   0x0E000090              0x00000010    05
ALU Ops (immed shift)       | C  o  n  d| 0  0  1| C  o  d  e| S|     Rn    |     Rd    |Rotation   |     8-bit immediate   |   0x0E000000              0x02000000    03
LDR, STR (unsigned immed)   | C  o  n  d| 0  1  0| P| U| B| W| L|     Rn    |     Rd    | U  n  s  i  g  n  e  d  1 2 - bit |   0x0E000000              0x04000000    03
LDR, STR (immed-reg shift)  | C  o  n  d| 0  1  1| P| U| B| W| L|     Rn    |     Rd    | shift amount | type| 0|     Rm    |   0x0E000010              0x06000000    04
LDM, STM                    | C  o  n  d| 1  0  0| P| U| S| W| L|     Rn    | 16-bit field specifying which of the registers|   0x0E000000              0x08000000    03
B/BL                        | C  o  n  d| 1  0  1| L|            2  4  -  b  i  t     o  f  f  s  e  t                      |   0x0E000000              0x0A000000    03
SWI                         | C  o  n  d| 1  1  1  1|        24-bit "comment field"                                         |   0x0F000000              0x0F000000    04
CDP                         | C  o  n  d| 1  1  1  0| CP Opc    |    CRn    |    CRd    |    CP#    |   CP   | 0|    CRm    |   0x0F000010              0x0E000000    05
LDC/STC                     | C  o  n  d| 1  1  0| P| U| N| W| L|     Rn    |    CRd    |    CP#    |    Offset             |   0x0E000000              0x0C000000    03
MRC, MCR                    | C  o  n  d| 1  1  1  0| CP Opc | L|    CRn    |     Rd    |    CP#    |   CP   | 1|    CRm    |   0x0F000010              0x0E000010    05
Undefined                   | C  o  n  d| 0  1  1|                                                           | 1|           |   0x0E000010              0x06000010    04




Thumb
|15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00|
| 0  0  0| O  p| Offset5      |   Rs   |   Rd   | format 01, move shifted register
| 0  0  0  1  1  1|Op|Rn/Off3 |   Rs   |   Rd   | format 02, add and subtract
| 0  0  1| O  p|   Rd   |     Offset8           | format 03, mov, cmp, add, sub immediate
| 0  1  0  0  0  0|    Op     |   Rs   |   Rd   | format 04, ALU operation
| 0  1  0  0  0  1| O  p|H1|H2|  Rs/Hs |  Rd/Hd | format 05, Hi Reg ops and BX
| 0  1  0  0  1|    Rd  | 8-bit word            | format 06, PC relative load
| 0  1  0  1| L| B| 0|   Ro   |   Rb   |   Rd   | format 07, load and store rel offset
| 0  1  0  1| H| S| 1|   Ro   |   Rb   |   Rd   | format 08, load+store sign-extended byte + hwd
| 0  1  1| B| L|   Offset5    |   Rb   |   Rd   | format 09, load+store immediate offset
| 1  0  0  0| L|   Offset5    |   Rb   |   Rd   | format 10, load+store half-word
| 1  0  0  1| L|    Rd  | 8-bit word            | format 11, SP-relative load+store
| 1  0  1  0|Sp|    Rd  | 8-bit word            | format 12, Load address
| 1  0  1  1  0  0  0  0| S|    S-Word7         | format 13, Add offset to SP
| 1  0  1  1| L| 1  0| R|      RegisterList     | format 14, Push and pop registers
| 1  1  0  0| L|    Rb  |      RegisterList     | format 15, multiple load+store
| 1  1  0  1|  Cond     |      Soffset8         | format 16, Conditional branch
| 1  1  0  1  1  1  1  1|      Value8           | format 17, Software Interrupt
| 1  1  1  0  0|      Offset 11                 | format 18, unconditional branch
| 1  1  1  1  H|               Offset           | format 19, Long branch with link

